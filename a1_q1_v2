// 181527590_###_a04_q1.c.txt
// Shaan Bhatia - Github ID: @shaanbhatia
// mir
// Github URL:

/*///////////////////////////////////////////////////////////////////////
 / Write a multi-threaded program that implements the banker's algorithm /
 ///////////////////////////////////////////////////////////////////////*/

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <sys/stat.h>
#include <time.h>
#include <semaphore.h>
#include <ctype.h>

int** readFile_maxres(char *fileName, int m); // function to read from file

int main(int argc, char *argv[]) {
	if (argc < 2) {
		printf("Not enough arguments (need available resource quantities)\n");
		printf("Exit with error code -1\n");
		return -1;
	}
	//int n_customers;

	// Number of resource types
	int m_resources = (argc - 1);

	// Available resources array
	int ava_res[m_resources];

	// Initialize available resource array with command line arguments
	for (int i = 0; i < m_resources; i++) {
		ava_res[i] = atoi(argv[i + 1]);
	}

	// Read file to initialize customers
	int **max_r = readFile_maxres("sample4_in.txt", m_resources);

	// Because c is a bitch
	printf("%d, %d, \n", ava_res[0], max_r[0][0]);

	return 0;
}

int** readFile_maxres(char *fileName, int m) {

	FILE *in = fopen(fileName, "r");
	if (!in) {
		printf("Error in opening input file. Exiting with error code -1\n");
		return NULL;
	}
	// There will be n customers
	int n = 0;

	// Store file content in array
	struct stat st;
	fstat(fileno(in), &st);
	char *fileContent = (char*) malloc(((int) st.st_size + 1) * sizeof(char));
	fileContent[0] = '\0';

	while (!feof(in)) {
		char line[100];
		if (fgets(line, 100, in) != NULL) {
			strncat(fileContent, line, strlen(line));
			n++;
		}
	}
	fclose(in);

	int max_res[n][m];
	int count = 0;
	char c[2] = { 0 };
	int i = 0, j = 0;
	while (fileContent[count]) {
		if (isdigit(fileContent[count])) {
			c[0] = fileContent[count];
			max_res[i][j] = atoi(c);
			j++;
			if (j == m) {
				j = 0;
				i++;
			}
		}
		count++;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("%d,", max_res[i][j]);
		}
		printf("\n");
	}

	return max_res;
}
